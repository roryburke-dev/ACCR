using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace ACCRSourceGenerators;

[Generator]
public class CoordinatorGenerator : ISourceGenerator
{
    // Generated Attribute
    private const string _attribute = """
                                          using System;

                                          [AttributeUsage(AttributeTargets.Class, Inherited = true, AllowMultiple = false)]
                                          internal class CoordinatorAttribute : Attribute { }
                                          """;
	   
    public void Initialize(GeneratorInitializationContext context)
    {
        context.RegisterForPostInitialization(i => i.AddSource("CoordinatorAttribute.g.cs", _attribute));
        context.RegisterForSyntaxNotifications(() => new CoordinatorSyntaxReceiver());        
    }

    public void Execute(GeneratorExecutionContext context)
    {
        if (context.SyntaxContextReceiver is not CoordinatorSyntaxReceiver receiver)
            return;
        var coordinatorInterface = context.Compilation.GetTypeByMetadataName("ACCR.ICoordinator");
        var containerInterface = context.Compilation.GetTypeByMetadataName("ACCR.IContainer");
        var stateInterface = context.Compilation.GetTypeByMetadataName("Utils.IState");
        foreach (var classSymbol in receiver.Coordinators)
        {
            var resolvers = receiver.Resolvers[classSymbol];
            var containers = receiver.Containers[classSymbol];
            var states = receiver.States;
            string generatedCode = $$"""
                                     // <auto-generated> /
                                     using System;
                                     using System.Collections.Generic;
                                     using System.Linq;
                                     using UnityEngine;
                                     using ACCR;
                                     
                                     public partial class {{classSymbol.Name}} : {{coordinatorInterface}} 
                                     {
                                         public List<{{containerInterface}}> Containers { get; set; }
                                         public {{stateInterface}} CurrentState { get; set; }
                                         public {{stateInterface}} PreviousState { get; set; }
                                         public {{stateInterface}} GetCurrentState()
                                         {
                                             return CurrentState;
                                         }
                                         
                                         public {{stateInterface}} GetPreviousState()
                                         {
                                             return PreviousState;
                                         }
                                         
                                         public void ChangeState({{stateInterface}} newState)
                                         {
                                             CurrentState?.Exit();
                                             PreviousState = CurrentState;
                                             CurrentState = newState;
                                             CurrentState?.Enter();
                                         }
                                         
                                         public void UpdateState()
                                         {
                                             CurrentState?.Execute();
                                         }
                                         
                                         public void Initialize()
                                         {
                                            Containers = new List<{{containerInterface}}>();
                                            InitializeResolvers();
                                            InitializeContainers();
                                         }
                                         
                                         public void InitializeResolvers()
                                         {
                                            {{GenerateResolverInitializations(resolvers)}}
                                         }
                                         
                                         public void InitializeContainers()
                                         {
                                            {{GenerateContainerInitializations(containers)}}
                                         }
                                         
                                         public {{containerInterface}} GetContainer<T>() where T : IContainer
                                         {
                                            return Containers.OfType<T>().FirstOrDefault();
                                         }
                                     
                                         public List<{{containerInterface}}> GetContainers<T>() where T : IContainer
                                         {
                                            return Containers.Where(x => x is T).Cast<{{containerInterface}}>().ToList();                  
                                         }
                                     }
                                     """;

            context.AddSource($"{classSymbol.Name}.g.cs", generatedCode);
        }
    }
    
    private string GenerateContainerInitializations(List<IFieldSymbol> containers)
    {
        var builder = new StringBuilder();
        foreach (var field in containers)
        {
            var gameObject = "GO_" + field.Name;
            builder.AppendLine($"GameObject {gameObject} = new GameObject();");
            builder.AppendLine($"{gameObject}.AddComponent<{field.Type}>();");
            builder.AppendLine($"{field.Name} = {gameObject}.GetComponent<{field.Type}>();");
            builder.AppendLine($"Containers.Add(this.{field.Name});");
            builder.AppendLine($"{gameObject}.transform.SetParent(transform);");
            builder.AppendLine($"{gameObject}.name = {field.Name}.ToString().Substring(16);");
        }
        return builder.ToString();
    }

    private string GenerateResolverInitializations(List<IFieldSymbol> resolvers)
    {
        var builder = new StringBuilder();
        foreach (var field in resolvers)
        {
            builder.AppendLine($"this.{field.Name} = new {field.Type}();");
            builder.AppendLine($"{field.Name}.Initialize();");
            builder.AppendLine($"{field.Name}.Register(this);");
        }
        return builder.ToString();
    }

    private class CoordinatorSyntaxReceiver : ISyntaxContextReceiver
    {
        public List<INamedTypeSymbol> Coordinators { get; } = [];
        public List<INamedTypeSymbol> States { get; } = [];
        public Dictionary<INamedTypeSymbol, List<IFieldSymbol>> Resolvers { get; } = [];
        public Dictionary<INamedTypeSymbol, List<IFieldSymbol>> Containers { get; } = [];
        
        public void OnVisitSyntaxNode(GeneratorSyntaxContext context)
        {
            if (context.Node is not ClassDeclarationSyntax { AttributeLists.Count: > 0 } classDeclarationSyntax)
                return;
            if(context.SemanticModel.GetDeclaredSymbol(classDeclarationSyntax) is not INamedTypeSymbol classSymbol)
                return;
            if (classSymbol.GetAttributes().Any(ad => ad.AttributeClass?.ToDisplayString() == "CoordinatorAttribute"))
            {
                Coordinators.Add(classSymbol);
                Resolvers[classSymbol] = new List<IFieldSymbol>();
                Containers[classSymbol] = new List<IFieldSymbol>();

                foreach (var state in classSymbol.GetMembers().OfType<INamedTypeSymbol>())
                {
                    if (state.GetAttributes().Any(ad => ad.AttributeClass?.ToDisplayString() == "StateAttribute"))
                    {
                        States.Add(state);
                    }
                }

                foreach (var field in classSymbol.GetMembers().OfType<IFieldSymbol>())
                {
                    if (field.GetAttributes().Any(ad => ad.AttributeClass?.ToDisplayString() == "ResolverAttribute"))
                    {
                        Resolvers[classSymbol].Add(field);
                    }
                }
                
                foreach (var field in classSymbol.GetMembers().OfType<IFieldSymbol>())
                {
                    if (field.GetAttributes().Any(ad => ad.AttributeClass?.ToDisplayString() == "ContainerAttribute"))
                    {
                        Containers[classSymbol].Add(field);
                    }
                }
            }
        }
    }
}

