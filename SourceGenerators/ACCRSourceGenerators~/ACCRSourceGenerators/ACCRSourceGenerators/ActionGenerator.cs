using System.Collections.Generic;
using System.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace ACCRSourceGenerators;

public class ActionGenerator 
{
    // Generated Attribute
    private const string _attributeText = """
                                          using System;
                                          
                                          [AttributeUsage(AttributeTargets.Class | AttributeTargets.Field, Inherited = true, AllowMultiple = false)]
                                          public class ActionAttribute : Attribute { }
                                          """;
	   
    public void Initialize(GeneratorInitializationContext context)
    {
        context.RegisterForPostInitialization(i => i.AddSource("ActionAttribute.g.cs", _attributeText));
        context.RegisterForSyntaxNotifications(() => new ActionSyntaxReceiver());        
    }

    public void Execute(GeneratorExecutionContext context)
    {
        if (context.SyntaxContextReceiver is not ActionSyntaxReceiver receiver)
            return;
        var actionInterface = context.Compilation.GetTypeByMetadataName("ACCR.IAction");
        var aspectInterface = context.Compilation.GetTypeByMetadataName("ACCR.IAspect");
        foreach (var classSymbol in receiver.Actions)
        {
            string generatedCode = $$"""
                                     // <auto-generated/
                                     using System;
                                     using ACCR;
                                     
                                     public partial class {{classSymbol.Name}} : {{actionInterface}} 
                                     {
                                        public event ActionEventHandler OnAction;
                                        
                                        public void Execute({{aspectInterface}} aspect) 
                                        {
                                            
                                        }
                                     }
                                     """;
            context.AddSource($"{classSymbol.Name}.g.cs", generatedCode);
        }
    }

    private class ActionSyntaxReceiver : ISyntaxContextReceiver
    {
        public List<INamedTypeSymbol> Actions { get; } = [];
        public void OnVisitSyntaxNode(GeneratorSyntaxContext context)
        {
            if (context.Node is not ClassDeclarationSyntax { AttributeLists.Count: > 0 } classDeclarationSyntax)
                return;
            if(context.SemanticModel.GetDeclaredSymbol(classDeclarationSyntax) is not INamedTypeSymbol classSymbol)
                return;
            if (classSymbol.GetAttributes().Any(ad => ad.AttributeClass?.ToDisplayString() == "ActionAttribute"))
            {
                Actions.Add(classSymbol);
            }
        }
    }
}