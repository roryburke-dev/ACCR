using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace ACCRSourceGenerators;

public class ACCRSourceGenerator
{
    // Generated Attribute
    private const string _attributeCode = """
                                          using System;

                                          [AttributeUsage(AttributeTargets.Class, Inherited = true, AllowMultiple = true)]
                                          internal class AspectAttribute : Attribute { }
                                          
                                          [AttributeUsage(AttributeTargets.Class, Inherited = true, AllowMultiple = true)]
                                          internal class ContainerAttribute : Attribute { }
                                          
                                          [AttributeUsage(AttributeTargets.Class, Inherited = true, AllowMultiple = true)]
                                          internal class CoordinatorAttribute : Attribute { }
                                          
                                          [AttributeUsage(AttributeTargets.Class, Inherited = true, AllowMultiple = true)]
                                          internal class ResolverAttribute : Attribute { }
                                          """;
    
    public void Initialize(GeneratorInitializationContext context)
    {
        context.RegisterForPostInitialization(i => i.AddSource("ACCRSourceGeneratorAttribute.g.cs", _attributeCode));
        context.RegisterForSyntaxNotifications(() => new ACCRSyntaxReceiver());        
    }

    public void Execute(GeneratorExecutionContext context)
    {
        if (context.SyntaxContextReceiver is not ACCRSyntaxReceiver receiver)
            return;
        
        // Aspects
        foreach (var classSymbol in receiver.Aspects)
        {
            var fContainers = receiver.FContainers[classSymbol];
            var generatedCode = $$"""
                                     // <auto-generated/
                                     using System;

                                     public partial class {{classSymbol.Name}}
                                     {
                                     private readonly Dictionary<Type, object> _containers = new();
                                         
                                         public void InitializeContainers()
                                         {
                                            {{GenerateContainersInitializations(fContainers)}}
                                         }
                                         
                                         public T GetContainer<T>() where T : class
                                         {
                                             if (_containers.TryGetValue(typeof(T), out var container))
                                             {
                                                 return (T)container;
                                             }
                                             return null;
                                         }
                                         
                                         public Dictionary<Type, object> GetAllContainers()
                                         {
                                            return _containers;
                                         }
                                     }
                                     """;
            context.AddSource($"{classSymbol.Name}.g.cs", generatedCode);
        }
        
        // Containers
        foreach (var classSymbol in receiver.Containers)
        {
            var fAspects = receiver.FAspects[classSymbol];
            var generatedCode = $$"""
                                  // <auto-generated/
                                  using System;
                                  using System.Collections.Generic;

                                  public partial class {{classSymbol.Name}}
                                  {
                                      private readonly Dictionary<Type, object> _aspects = new();
                                      
                                      public void InitializeAspects()
                                      {
                                         {{GenerateAspectInitializations(fAspects)}}
                                      }
                                      
                                      public T GetAspect<T>() where T : class
                                      {
                                         if (_aspects.TryGetValue(typeof(T), out var aspect))
                                         {
                                             return (T)aspect;
                                         }
                                         return null;
                                      }
                                      
                                      public Dictionary<Type, object> GetAllAspects()
                                      {
                                         return _aspects;
                                      }
                                  }
                                  """;
            context.AddSource($"{classSymbol.Name}.g.cs", generatedCode);
        }
        
        // Coordinators
        foreach (var classSymbol in receiver.Coordinators)
        {
            var fAspects = receiver.FAspects[classSymbol];
            var generatedCode = $$"""
                                     // <auto-generated/
                                     using System;
                                     using System.Collections.Generic;

                                     public partial class {{classSymbol.Name}}
                                     {
                                         private readonly Dictionary<Type, object> _aspects = new();
                                         
                                         public void InitializeAspects()
                                         {
                                            {{GenerateAspectInitializations(fAspects)}}
                                         }
                                         
                                         public T GetAspect<T>() where T : class
                                         {
                                            if (_aspects.TryGetValue(typeof(T), out var aspect))
                                            {
                                                return (T)aspect;
                                            }
                                            return null;
                                         }
                                         
                                         public Dictionary<Type, object> GetAllAspects()
                                         {
                                            return _aspects;
                                         }
                                     }
                                     """;
            context.AddSource($"{classSymbol.Name}.g.cs", generatedCode);
        }
        
        // Resolvers
        foreach (var classSymbol in receiver.Resolvers)
        {
            var fAspects = receiver.FAspects[classSymbol];
            var generatedCode = $$"""
                                     // <auto-generated/
                                     using System;
                                     using System.Collections.Generic;

                                     public partial class {{classSymbol.Name}}
                                     {
                                         private readonly Dictionary<Type, object> _aspects = new();
                                         
                                         public void InitializeAspects()
                                         {
                                            {{GenerateAspectInitializations(fAspects)}}
                                         }
                                         
                                         public T GetAspect<T>() where T : class
                                         {
                                            if (_aspects.TryGetValue(typeof(T), out var aspect))
                                            {
                                                return (T)aspect;
                                            }
                                            return null;
                                         }
                                         
                                         public Dictionary<Type, object> GetAllAspects()
                                         {
                                            return _aspects;
                                         }
                                     }
                                     """;
            context.AddSource($"{classSymbol.Name}.g.cs", generatedCode);
        }
    }

    private string GenerateAspectInitializations(List<IFieldSymbol> aspects)
    {
        var builder = new StringBuilder();
        foreach (var field in aspects)
        {
            builder.AppendLine($"{field.Name} = new {field.Type}();");
            builder.AppendLine($"_aspects[typeof({field.Type})] = {field.Name};");
        }
        return builder.ToString();
    }
    
    private string GenerateContainersInitializations(List<IFieldSymbol> containers)
    {
        var builder = new StringBuilder();
        foreach (var field in containers)
        {
            builder.AppendLine($"{field.Name} = new {field.Type}();");
            builder.AppendLine($"_aspects[typeof({field.Type})] = {field.Name};");
        }
        return builder.ToString();
    }
    

    private class ACCRSyntaxReceiver : ISyntaxContextReceiver
    {
        public List<INamedTypeSymbol> Containers { get; } = [];
        public List<INamedTypeSymbol> Aspects { get; } = [];
        public List<INamedTypeSymbol> Coordinators { get; } = [];
        public List<INamedTypeSymbol> Resolvers { get; } = [];
        public Dictionary<INamedTypeSymbol, List<IFieldSymbol>> FAspects { get; } = [];
        public Dictionary<INamedTypeSymbol, List<IFieldSymbol>> FContainers { get; } = [];
        public Dictionary<INamedTypeSymbol, List<IFieldSymbol>> FCoordinators { get; } = [];
        public Dictionary<INamedTypeSymbol, List<IFieldSymbol>> FResolvers { get; } = [];
        
        public void OnVisitSyntaxNode(GeneratorSyntaxContext context)
        {
            if (context.Node is not ClassDeclarationSyntax { AttributeLists.Count: > 0 } classDeclarationSyntax)
                return;
            if(context.SemanticModel.GetDeclaredSymbol(classDeclarationSyntax) is not INamedTypeSymbol classSymbol)
                return;
            
            if (classSymbol.GetAttributes().Any(ad => ad.AttributeClass?.ToDisplayString() == "AspectAttribute"))
            {
                Aspects.Add(classSymbol);
                FContainers[classSymbol] = new List<IFieldSymbol>();

                foreach (var field in classSymbol.GetMembers().OfType<IFieldSymbol>())
                {
                    if (field.GetAttributes().Any(ad => ad.AttributeClass?.ToDisplayString() == "FContainerAttribute"))
                    {
                        FContainers[classSymbol].Add(field);
                    }
                    else if (field.GetAttributes().Any(ad => ad.AttributeClass?.ToDisplayString() == "FCoordinatorAttribute"))
                    {
                        FCoordinators[classSymbol].Add(field);
                    }
                    else if (field.GetAttributes().Any(ad => ad.AttributeClass?.ToDisplayString() == "FResolverAttribute"))
                    {
                        FResolvers[classSymbol].Add(field);
                    }
                }
            }
            else if (classSymbol.GetAttributes().Any(ad => ad.AttributeClass?.ToDisplayString() == "ContainerAttribute"))
            {
                Containers.Add(classSymbol);
                FAspects[classSymbol] = new List<IFieldSymbol>();

                foreach (var field in classSymbol.GetMembers().OfType<IFieldSymbol>())
                {
                    if (field.GetAttributes().Any(ad => ad.AttributeClass?.ToDisplayString() == "FAspectAttribute"))
                    {
                        FAspects[classSymbol].Add(field);
                    }
                    else if (field.GetAttributes().Any(ad => ad.AttributeClass?.ToDisplayString() == "FCoordinatorAttribute"))
                    {
                        FCoordinators[classSymbol].Add(field);
                    }
                    else if (field.GetAttributes().Any(ad => ad.AttributeClass?.ToDisplayString() == "FResolverAttribute"))
                    {
                        FResolvers[classSymbol].Add(field);
                    }
                }
            }
            
            else if (classSymbol.GetAttributes().Any(ad => ad.AttributeClass?.ToDisplayString() == "CoordinatorAttribute"))
            {
                Containers.Add(classSymbol);
                FAspects[classSymbol] = new List<IFieldSymbol>();

                foreach (var field in classSymbol.GetMembers().OfType<IFieldSymbol>())
                {
                    if (field.GetAttributes().Any(ad => ad.AttributeClass?.ToDisplayString() == "FAspectAttribute"))
                    {
                        FAspects[classSymbol].Add(field);
                    }
                    else if (field.GetAttributes().Any(ad => ad.AttributeClass?.ToDisplayString() == "FContainerAttribute"))
                    {
                        FContainers[classSymbol].Add(field);
                    }
                    else if (field.GetAttributes().Any(ad => ad.AttributeClass?.ToDisplayString() == "FResolverAttribute"))
                    {
                        FResolvers[classSymbol].Add(field);
                    }
                }
            }
            
            else if (classSymbol.GetAttributes().Any(ad => ad.AttributeClass?.ToDisplayString() == "ResolverAttribute"))
            {
                Aspects.Add(classSymbol);
                FContainers[classSymbol] = new List<IFieldSymbol>();

                foreach (var field in classSymbol.GetMembers().OfType<IFieldSymbol>())
                {
                    if (field.GetAttributes().Any(ad => ad.AttributeClass?.ToDisplayString() == "FAspectAttribute"))
                    {
                        FAspects[classSymbol].Add(field);
                    }
                    else if (field.GetAttributes().Any(ad => ad.AttributeClass?.ToDisplayString() == "FContainerAttribute"))
                    {
                        FContainers[classSymbol].Add(field);
                    }
                    else if (field.GetAttributes().Any(ad => ad.AttributeClass?.ToDisplayString() == "FCoordinatorAttribute"))
                    {
                        FCoordinators[classSymbol].Add(field);
                    }
                    else if (field.GetAttributes().Any(ad => ad.AttributeClass?.ToDisplayString() == "FResolverAttribute"))
                    {
                        FResolvers[classSymbol].Add(field);
                    }
                }
            }
        }
    }
}